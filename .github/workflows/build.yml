# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Acuity Build

on:
  pull_request: # build on pull request changes
    branches: [ "**" ]

jobs:

  security-build:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:

      - uses: actions/checkout@v3

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build
        run: mvn -B package deploy -P grunt,checks,docker

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: clns-acuity-va-security

  config-build:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:

      - uses: actions/checkout@v3

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build
        run: mvn -B package deploy -P docker

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: clns-acuity-config-server

  vahub-build:

    runs-on: ubuntu-latest
    needs: [security-build]

    permissions:
      contents: read
      packages: write

    steps:

      - uses: actions/checkout@v3

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build
        run: mvn -B package deploy -P docker,webapp,github

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: clns-acuity-vahub

  adminui-build:

    runs-on: ubuntu-latest
    needs: [security-build]

    permissions:
      contents: read
      packages: write

    steps:

      - uses: actions/checkout@v3

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build
        run: mvn -B package deploy -P docker,github

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: clns-acuity-admin

  flyway-and-postgres-build:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:

      - uses: actions/checkout@v3

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Flyway
        run: mvn -B package deploy -P docker-flyway

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: clns-acuity-flyway

      - name: Build Postgres
        run: mvn -B package deploy -P docker-postgres

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: clns-acuity-flyway
